/*
 * generated by Xtext 2.22.0
 */
package ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.ide.contentassist.antlr;

import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.ide.contentassist.antlr.internal.InternalPerspectiveDSLParser;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.services.PerspectiveDSLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PerspectiveDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PerspectiveDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PerspectiveDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
			builder.put(grammarAccess.getPerspectiveActionTypeAccess().getAlternatives(), "rule__PerspectiveActionType__Alternatives");
			builder.put(grammarAccess.getPerspectiveAccess().getGroup(), "rule__Perspective__Group__0");
			builder.put(grammarAccess.getPerspectiveAccess().getGroup_3(), "rule__Perspective__Group_3__0");
			builder.put(grammarAccess.getPerspectiveAccess().getGroup_20(), "rule__Perspective__Group_20__0");
			builder.put(grammarAccess.getLanguageAccess().getGroup(), "rule__Language__Group__0");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getGroup(), "rule__LanguageElementMapping__Group__0");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getGroup_27(), "rule__LanguageElementMapping__Group_27__0");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getGroup_28(), "rule__LanguageElementMapping__Group_28__0");
			builder.put(grammarAccess.getNestedMappingAccess().getGroup(), "rule__NestedMapping__Group__0");
			builder.put(grammarAccess.getInterLanguageMappingEndAccess().getGroup(), "rule__InterLanguageMappingEnd__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getGroup(), "rule__IntraLanguageMapping__Group__0");
			builder.put(grammarAccess.getHopAccess().getGroup(), "rule__Hop__Group__0");
			builder.put(grammarAccess.getPerspectiveModelAccess().getPerspectiveAssignment(), "rule__PerspectiveModel__PerspectiveAssignment");
			builder.put(grammarAccess.getPerspectiveAccess().getNameAssignment_1(), "rule__Perspective__NameAssignment_1");
			builder.put(grammarAccess.getPerspectiveAccess().getDefaultAssignment_3_1(), "rule__Perspective__DefaultAssignment_3_1");
			builder.put(grammarAccess.getPerspectiveAccess().getDisplayNameAssignment_6(), "rule__Perspective__DisplayNameAssignment_6");
			builder.put(grammarAccess.getPerspectiveAccess().getLanguagesAssignment_10(), "rule__Perspective__LanguagesAssignment_10");
			builder.put(grammarAccess.getPerspectiveAccess().getActionsAssignment_14(), "rule__Perspective__ActionsAssignment_14");
			builder.put(grammarAccess.getPerspectiveAccess().getMappingsAssignment_18(), "rule__Perspective__MappingsAssignment_18");
			builder.put(grammarAccess.getPerspectiveAccess().getIntralanguagemappingsAssignment_20_2(), "rule__Perspective__IntralanguagemappingsAssignment_20_2");
			builder.put(grammarAccess.getLanguageAccess().getNameAssignment_2(), "rule__Language__NameAssignment_2");
			builder.put(grammarAccess.getLanguageAccess().getRootPackageAssignment_5(), "rule__Language__RootPackageAssignment_5");
			builder.put(grammarAccess.getLanguageAccess().getPackageClassNameAssignment_8(), "rule__Language__PackageClassNameAssignment_8");
			builder.put(grammarAccess.getLanguageAccess().getRoleNameAssignment_11(), "rule__Language__RoleNameAssignment_11");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getNameAssignment_1(), "rule__LanguageElementMapping__NameAssignment_1");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getFromCardinalityAssignment_5(), "rule__LanguageElementMapping__FromCardinalityAssignment_5");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getToCardinalityAssignment_9(), "rule__LanguageElementMapping__ToCardinalityAssignment_9");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getFromElementAssignment_13(), "rule__LanguageElementMapping__FromElementAssignment_13");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getFromRoleNameAssignment_15(), "rule__LanguageElementMapping__FromRoleNameAssignment_15");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getFromGetElementAssignment_17(), "rule__LanguageElementMapping__FromGetElementAssignment_17");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getToElementAssignment_21(), "rule__LanguageElementMapping__ToElementAssignment_21");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getToRoleNameAssignment_23(), "rule__LanguageElementMapping__ToRoleNameAssignment_23");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getToGetElementAssignment_25(), "rule__LanguageElementMapping__ToGetElementAssignment_25");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getNestedMappingsAssignment_27_3(), "rule__LanguageElementMapping__NestedMappingsAssignment_27_3");
			builder.put(grammarAccess.getLanguageElementMappingAccess().getInterLanguageMappingEndsAssignment_28_2(), "rule__LanguageElementMapping__InterLanguageMappingEndsAssignment_28_2");
			builder.put(grammarAccess.getNestedMappingAccess().getNameAssignment_2(), "rule__NestedMapping__NameAssignment_2");
			builder.put(grammarAccess.getNestedMappingAccess().getFromElementNameAssignment_7(), "rule__NestedMapping__FromElementNameAssignment_7");
			builder.put(grammarAccess.getNestedMappingAccess().getFromRoleNameAssignment_9(), "rule__NestedMapping__FromRoleNameAssignment_9");
			builder.put(grammarAccess.getNestedMappingAccess().getToElementNameAssignment_14(), "rule__NestedMapping__ToElementNameAssignment_14");
			builder.put(grammarAccess.getNestedMappingAccess().getToRoleNameAssignment_16(), "rule__NestedMapping__ToRoleNameAssignment_16");
			builder.put(grammarAccess.getInterLanguageMappingEndAccess().getNameAssignment_4(), "rule__InterLanguageMappingEnd__NameAssignment_4");
			builder.put(grammarAccess.getInterLanguageMappingEndAccess().getOriginAssignment_8(), "rule__InterLanguageMappingEnd__OriginAssignment_8");
			builder.put(grammarAccess.getInterLanguageMappingEndAccess().getDestinationAssignment_11(), "rule__InterLanguageMappingEnd__DestinationAssignment_11");
			builder.put(grammarAccess.getActionAccess().getActionTypeAssignment_1(), "rule__Action__ActionTypeAssignment_1");
			builder.put(grammarAccess.getActionAccess().getRoleNameAssignment_2(), "rule__Action__RoleNameAssignment_2");
			builder.put(grammarAccess.getActionAccess().getNameAssignment_3(), "rule__Action__NameAssignment_3");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getNameAssignment_3(), "rule__IntraLanguageMapping__NameAssignment_3");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getClosureAssignment_7(), "rule__IntraLanguageMapping__ClosureAssignment_7");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getReuseAssignment_10(), "rule__IntraLanguageMapping__ReuseAssignment_10");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getIncreaseDepthAssignment_13(), "rule__IntraLanguageMapping__IncreaseDepthAssignment_13");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getChangeModelAssignment_16(), "rule__IntraLanguageMapping__ChangeModelAssignment_16");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getFromElementAssignment_19(), "rule__IntraLanguageMapping__FromElementAssignment_19");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getFromGetElementAssignment_21(), "rule__IntraLanguageMapping__FromGetElementAssignment_21");
			builder.put(grammarAccess.getIntraLanguageMappingAccess().getHopsAssignment_25(), "rule__IntraLanguageMapping__HopsAssignment_25");
			builder.put(grammarAccess.getHopAccess().getHopElementAssignment_2(), "rule__Hop__HopElementAssignment_2");
			builder.put(grammarAccess.getHopAccess().getFromGetHopAssignment_4(), "rule__Hop__FromGetHopAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PerspectiveDSLGrammarAccess grammarAccess;

	@Override
	protected InternalPerspectiveDSLParser createParser() {
		InternalPerspectiveDSLParser result = new InternalPerspectiveDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PerspectiveDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PerspectiveDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
