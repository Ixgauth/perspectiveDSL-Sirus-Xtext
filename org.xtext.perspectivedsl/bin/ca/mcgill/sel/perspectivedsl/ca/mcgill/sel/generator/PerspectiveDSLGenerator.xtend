/*
 * generated by Xtext 2.23.0
 */
package ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Perspective

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PerspectiveDSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for (perspective : resource.allContents.toIterable.filter(Perspective)){
            fsa.generateFile(
                 "ca/mcgill/sel/core/perspective/"  + perspective.name.toLowerCase() + "/" + perspective.name + ".java",
                perspective.compile
                )
        }
        
        for (perspective : resource.allContents.toIterable.filter(Perspective)){
            fsa.generateFile(
                 "ca/mcgill/sel/core/perspective/"  + perspective.name.toLowerCase() + "/" + perspective.name + "Specification.java",
                PerspectiveSpecification.compile(perspective)
                )
        }
        
        for (perspective : resource.allContents.toIterable.filter(Perspective)){
            fsa.generateFile(
                 "ca/mcgill/sel/core/perspective/"  + perspective.name.toLowerCase() + "/" + "ElementMapping.java",
                ElementMapping.compile(perspective)
                )
        }
	}
	
	private def compile(Perspective perspective) {
		
		'''
		package ca.mcgill.sel.core.perspective.«perspective.name.toLowerCase»;
		
		import java.io.IOException;
		import java.util.List;
		
		import org.eclipse.emf.common.util.URI;
		
		import ca.mcgill.sel.commons.ResourceUtil;
		import ca.mcgill.sel.commons.emf.util.AdapterFactoryRegistry;
		import ca.mcgill.sel.commons.emf.util.ResourceManager;
		import ca.mcgill.sel.core.COREArtefact;
		import ca.mcgill.sel.core.COREConcern;
		import ca.mcgill.sel.core.COREExternalLanguage;
		import ca.mcgill.sel.core.COREPerspective;
		import ca.mcgill.sel.core.CoreFactory;
		import ca.mcgill.sel.core.CorePackage;
		import ca.mcgill.sel.core.provider.CoreItemProviderAdapterFactory;
		import ca.mcgill.sel.core.util.COREModelUtil;
		import ca.mcgill.sel.core.util.CoreResourceFactoryImpl;
		import ca.mcgill.sel.ram.ui.utils.ResourceUtils;
		
		/**
		 * This is the base class for creating and then saving a perspective. To instantiate and then save
		 * the bnew poerspective, just run the class as a regular java class..
		 * 
		 * @author Hyacinth Ali
		 *
		 *@generated
		 *
		 */
		public class «perspective.name» {
		    
		 public static void main(String[] args) {
		        
		        // Initialize ResourceManager
		        ResourceManager.initialize();
		    
		        // Initialize CORE packages.
		        CorePackage.eINSTANCE.eClass();
		    
		        // Register resource factories
		        ResourceManager.registerExtensionFactory("core", new CoreResourceFactoryImpl());
		    
		        // Initialize adapter factories
		        AdapterFactoryRegistry.INSTANCE.addAdapterFactory(CoreItemProviderAdapterFactory.class);
		        
		        ResourceUtils.loadLibraries();
		       
		        // create a perspective
		        COREConcern perspectiveConcern = COREModelUtil.createConcern("«perspective.displayName»");
		        
		        COREPerspective perspective = CoreFactory.eINSTANCE.createCOREPerspective();
		        perspective.setName("«perspective.displayName»");
		        
		        //Add perspective to the concern
		        perspectiveConcern.getArtefacts().add(perspective);
		        
		
		        // Add existing external languages, if any
		        List<String> languages = ResourceUtil.getResourceListing("models/testlanguages/", ".core");
		        if (languages != null) {
		        	«FOR language : perspective.languages»
		        		for (String l : languages) {
		        			// load existing languages
		        			URI fileURI = URI.createURI(l);
		        			COREConcern languageConcern = (COREConcern) ResourceManager.loadModel(fileURI);
		        			for (COREArtefact a : languageConcern.getArtefacts()) {
		        				if (a instanceof COREExternalLanguage) {
		        					COREExternalLanguage existingLanguage = (COREExternalLanguage) a;
		        					if (existingLanguage.getName().equals("«language.name»")) {
		        						perspective.getLanguages().put("«language.roleName»", existingLanguage);
		        					} 
		        				}
		        			}
		        		}
		        	«ENDFOR»

		        }
		        
		        // initialize perspective with perspective actions and mappings
		        «perspective.name»Specification.initializePerspective(perspective);
		        
		        String fileName = "/Users/hyacinthali/git/touchram/ca.mcgill.sel.ram/resources/models/testperspectives/"
		           + "«perspective.name»_Perspective";
		        
		        try {
		            ResourceManager.saveModel(perspectiveConcern, fileName.concat("." + "core"));
		        } catch (IOException e) {
		            // Shouldn't happen.
		            e.printStackTrace();
		        } 
		   }
		}
		
		'''
		
	}
}