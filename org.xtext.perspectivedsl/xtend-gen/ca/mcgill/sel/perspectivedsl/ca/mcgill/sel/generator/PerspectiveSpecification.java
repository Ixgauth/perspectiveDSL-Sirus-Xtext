package ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.generator;

import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Action;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Cardinality;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Hop;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.InterLanguageMappingEnd;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.IntraLanguageMapping;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Language;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.LanguageElementMapping;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.NestedMapping;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Perspective;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class PerspectiveSpecification {
  public static CharSequence compile(final Perspective perspective) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package ca.mcgill.sel.core.perspective.");
    String _lowerCase = perspective.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.COREExternalLanguage;");
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.CORELanguageElement;");
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.CORELanguageElementMapping;");
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.COREPerspective;");
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.COREPerspectiveAction;");
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.Cardinality;");
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.CoreFactory;");
    _builder.newLine();
    _builder.append("import ca.mcgill.sel.core.MappingEnd;");
    _builder.newLine();
    _builder.append("//import ca.mcgill.sel.core.perspective.design.ElementMapping;");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Language> _languages = perspective.getLanguages();
      for(final Language language : _languages) {
        _builder.append("import ");
        String _rootPackage = language.getRootPackage();
        _builder.append(_rootPackage);
        _builder.append(".*;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public class ");
    String _name = perspective.getName();
    _builder.append(_name);
    _builder.append("Specification {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static COREPerspective initializePerspective(COREPerspective perspective) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// create perspective actions");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createPerspectiveAction(perspective);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// create perspective mappings");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createPerspectiveMappings(perspective);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// create IntraLanguage Mappings");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createIntraLanguageMappings(perspective);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return perspective;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static void createPerspectiveAction(COREPerspective perspective) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// create perspective actions");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("COREPerspectiveAction pAction = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    {
      EList<Action> _actions = perspective.getActions();
      for(final Action action : _actions) {
        _builder.append("        ");
        _builder.append("pAction = CoreFactory.eINSTANCE.createCORERedefineAction();");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("pAction.setName(\"");
        String _name_1 = action.getName();
        _builder.append(_name_1, "        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("pAction.setForRole(\"");
        String _roleName = action.getRoleName();
        _builder.append(_roleName, "        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("perspective.getActions().add(pAction);");
        _builder.newLine();
        _builder.append("        ");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static void createPerspectiveMappings(COREPerspective perspective) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// language element mapping ");
    _builder.newLine();
    {
      EList<LanguageElementMapping> _mappings = perspective.getMappings();
      for(final LanguageElementMapping mapping : _mappings) {
        {
          boolean _isEmpty = mapping.getNestedMappings().isEmpty();
          if (_isEmpty) {
            _builder.append("        ");
            _builder.append("CORELanguageElementMapping ");
            String _firstLower = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower, "        ");
            _builder.append("MappingType = createLanguageElementMapping(perspective, ");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            String _cardinality = PerspectiveSpecification.getCardinality(mapping, true);
            _builder.append(_cardinality, "        ");
            _builder.append(", \"");
            String _fromRoleName = mapping.getFromRoleName();
            _builder.append(_fromRoleName, "        ");
            _builder.append("\", ");
            String _fromGetElement = mapping.getFromGetElement();
            _builder.append(_fromGetElement, "        ");
            _builder.append(", ");
            String _cardinality_1 = PerspectiveSpecification.getCardinality(mapping, 
              false);
            _builder.append(_cardinality_1, "        ");
            _builder.append(", \"");
            String _toRoleName = mapping.getToRoleName();
            _builder.append(_toRoleName, "        ");
            _builder.append("\", ");
            String _toGetElement = mapping.getToGetElement();
            _builder.append(_toGetElement, "        ");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.newLine();
            {
              boolean _isEmpty_1 = mapping.getInterLanguageMappingEnds().isEmpty();
              boolean _not = (!_isEmpty_1);
              if (_not) {
                _builder.append("        ");
                _builder.append("InterLanguageMapping ");
                String _firstLower_1 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_1, "        ");
                _builder.append("InterMapping = createInterLanguageMapping(");
                String _firstLower_2 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_2, "        ");
                _builder.append("MappingType);");
                _builder.newLineIfNotEmpty();
                _builder.append("        ");
                _builder.newLine();
                _builder.append("        ");
                _builder.append("int position = 0;");
                _builder.newLine();
                {
                  EList<InterLanguageMappingEnd> _interLanguageMappingEnds = mapping.getInterLanguageMappingEnds();
                  for(final InterLanguageMappingEnd interMappingEnd : _interLanguageMappingEnds) {
                    _builder.append("        ");
                    _builder.append("position +=1;");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("createInterMappingEnd(");
                    String _firstLower_3 = StringExtensions.toFirstLower(mapping.getName());
                    _builder.append(_firstLower_3, "        ");
                    _builder.append("InterMapping, ");
                    String _firstLower_4 = StringExtensions.toFirstLower(mapping.getName());
                    _builder.append(_firstLower_4, "        ");
                    _builder.append("MappingType,");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("    ");
                    boolean _isOrigin = interMappingEnd.isOrigin();
                    _builder.append(_isOrigin, "            ");
                    _builder.append(", ");
                    boolean _isDestination = interMappingEnd.isDestination();
                    _builder.append(_isDestination, "            ");
                    _builder.append(", position);");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("        ");
            _builder.append("    ");
            _builder.newLine();
          } else {
            _builder.append("        ");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("ElementMapping ");
            String _firstLower_5 = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower_5, "        ");
            _builder.append("Mapping = createLanguageElementMapping(perspective, ");
            String _cardinality_2 = PerspectiveSpecification.getCardinality(mapping, true);
            _builder.append(_cardinality_2, "        ");
            _builder.append(",");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.append(" ");
            _builder.append("\"");
            String _fromRoleName_1 = mapping.getFromRoleName();
            _builder.append(_fromRoleName_1, "         ");
            _builder.append("\", ");
            String _fromGetElement_1 = mapping.getFromGetElement();
            _builder.append(_fromGetElement_1, "         ");
            _builder.append(", ");
            String _cardinality_3 = PerspectiveSpecification.getCardinality(mapping, false);
            _builder.append(_cardinality_3, "         ");
            _builder.append(", \"");
            String _toRoleName_1 = mapping.getToRoleName();
            _builder.append(_toRoleName_1, "         ");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("                     ");
            String _toGetElement_1 = mapping.getToGetElement();
            _builder.append(_toGetElement_1, "                     ");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("CORELanguageElementMapping ");
            String _firstLower_6 = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower_6, "        ");
            _builder.append("MappingType = ");
            String _firstLower_7 = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower_7, "        ");
            _builder.append("Mapping.getMappingType();");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("// get from mapped language element, i.e., the from container of the feature to be mapped.");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("CORELanguageElement ");
            String _firstLower_8 = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower_8, "        ");
            _builder.append("MappingFromLanguageELement = ");
            String _firstLower_9 = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower_9, "        ");
            _builder.append("Mapping.getFromLanguageElement();");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("// get to mapped language element, i.e., the to container of the feature to be mapped.");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("CORELanguageElement ");
            String _firstLower_10 = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower_10, "        ");
            _builder.append("MappingToLanguageELement = ");
            String _firstLower_11 = StringExtensions.toFirstLower(mapping.getName());
            _builder.append(_firstLower_11, "        ");
            _builder.append("Mapping.getToLanguageElement();");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.newLine();
            {
              EList<NestedMapping> _nestedMappings = mapping.getNestedMappings();
              for(final NestedMapping nestedMapping : _nestedMappings) {
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("createNestedMapping(");
                String _firstLower_12 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_12, "                    ");
                _builder.append("MappingType, ");
                String _firstLower_13 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_13, "                    ");
                _builder.append("MappingFromLanguageELement, ");
                _builder.newLineIfNotEmpty();
                _builder.append("                    ");
                _builder.append("  ");
                String _firstLower_14 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_14, "                      ");
                _builder.append("MappingToLanguageELement, \"");
                String _fromElementName = nestedMapping.getFromElementName();
                _builder.append(_fromElementName, "                      ");
                _builder.append("\", \"");
                String _toElementName = nestedMapping.getToElementName();
                _builder.append(_toElementName, "                      ");
                _builder.append("\", ");
                _builder.newLineIfNotEmpty();
                _builder.append("                    ");
                _builder.append("  ");
                _builder.append("\"");
                String _fromRoleName_2 = mapping.getFromRoleName();
                _builder.append(_fromRoleName_2, "                      ");
                _builder.append("\", \"");
                String _toRoleName_2 = mapping.getToRoleName();
                _builder.append(_toRoleName_2, "                      ");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.newLine();
              }
            }
            _builder.append("        ");
            _builder.newLine();
            {
              boolean _isEmpty_2 = mapping.getInterLanguageMappingEnds().isEmpty();
              boolean _not_1 = (!_isEmpty_2);
              if (_not_1) {
                _builder.append("        ");
                _builder.append("InterLanguageMapping ");
                String _firstLower_15 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_15, "        ");
                _builder.append("InterMapping = createInterLanguageMapping(");
                String _firstLower_16 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_16, "        ");
                _builder.append("MappingType);");
                _builder.newLineIfNotEmpty();
                _builder.append("        ");
                _builder.newLine();
                _builder.append("        ");
                _builder.append("int position = 0;");
                _builder.newLine();
                {
                  EList<InterLanguageMappingEnd> _interLanguageMappingEnds_1 = mapping.getInterLanguageMappingEnds();
                  for(final InterLanguageMappingEnd interMappingEnd_1 : _interLanguageMappingEnds_1) {
                    _builder.append("        ");
                    _builder.append("position +=1;");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("createInterMappingEnd(");
                    String _firstLower_17 = StringExtensions.toFirstLower(mapping.getName());
                    _builder.append(_firstLower_17, "        ");
                    _builder.append("InterMapping, ");
                    String _firstLower_18 = StringExtensions.toFirstLower(mapping.getName());
                    _builder.append(_firstLower_18, "        ");
                    _builder.append("MappingType,");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("    ");
                    boolean _isOrigin_1 = interMappingEnd_1.isOrigin();
                    _builder.append(_isOrigin_1, "            ");
                    _builder.append(", ");
                    boolean _isDestination_1 = interMappingEnd_1.isDestination();
                    _builder.append(_isDestination_1, "            ");
                    _builder.append(", position);");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("        ");
                _builder.append("perspective.getNavigationMappings().add(");
                String _firstLower_19 = StringExtensions.toFirstLower(mapping.getName());
                _builder.append(_firstLower_19, "        ");
                _builder.append("InterMapping);");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.newLine();
          }
        }
        _builder.append("        ");
        _builder.append(" ");
        _builder.newLine();
        _builder.newLine();
      }
    }
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static void createIntraLanguageMappings(COREPerspective perspective) {");
    _builder.newLine();
    {
      EList<IntraLanguageMapping> _intralanguagemappings = perspective.getIntralanguagemappings();
      for(final IntraLanguageMapping intraLanguageMapping : _intralanguagemappings) {
        _builder.append("        ");
        _builder.append("EClass fromEClass = ");
        String _fromGetElement_2 = intraLanguageMapping.getFromGetElement();
        _builder.append(_fromGetElement_2, "        ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("IntraLanguageMapping ");
        String _firstLower_20 = StringExtensions.toFirstLower(intraLanguageMapping.getName());
        _builder.append(_firstLower_20, "        ");
        _builder.append("Mapping= createIntraLanguageMapping(perspective, ");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("\"");
        String _name_2 = intraLanguageMapping.getName();
        _builder.append(_name_2, "        \t");
        _builder.append("\", ");
        boolean _isClosure = intraLanguageMapping.isClosure();
        _builder.append(_isClosure, "        \t");
        _builder.append(", ");
        boolean _isReuse = intraLanguageMapping.isReuse();
        _builder.append(_isReuse, "        \t");
        _builder.append(", ");
        boolean _isIncreaseDepth = intraLanguageMapping.isIncreaseDepth();
        _builder.append(_isIncreaseDepth, "        \t");
        _builder.append(", ");
        boolean _isChangeModel = intraLanguageMapping.isChangeModel();
        _builder.append(_isChangeModel, "        \t");
        _builder.append(", fromEClass);");
        _builder.newLineIfNotEmpty();
        {
          EList<Hop> _hops = intraLanguageMapping.getHops();
          for(final Hop hop : _hops) {
            _builder.append("        ");
            _builder.append("EReference hopReference = ");
            String _fromGetHop = hop.getFromGetHop();
            _builder.append(_fromGetHop, "        ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.append("addHopToILM(");
            String _firstLower_21 = StringExtensions.toFirstLower(intraLanguageMapping.getName());
            _builder.append(_firstLower_21, "        ");
            _builder.append("Mapping, hopReference);");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.newLine();
          }
        }
        _builder.append("        ");
        _builder.append("perspective.getNavigationMappings().add(");
        String _firstLower_22 = StringExtensions.toFirstLower(intraLanguageMapping.getName());
        _builder.append(_firstLower_22, "        ");
        _builder.append("Mapping);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method creates an instance of {@link CORELanguageElementMapping}.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param perspective ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param fromCardinality");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param fromRoleName");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param fromMetaclass");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param toCardinality");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param toRoleName");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param toMetaclass");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the language element mapping.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @author Hyacinth Ali");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static ElementMapping createLanguageElementMapping(COREPerspective perspective,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Cardinality fromCardinality, String fromRoleName, EObject fromMetaclass, Cardinality toCardinality, ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String toRoleName, EObject toMetaclass) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElementMapping mappingType = CoreFactory.eINSTANCE.createCORELanguageElementMapping();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mappingType.setIdentifier(getNextMappingId(perspective));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// from mapping end settings");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MappingEnd fromMappingEnd = CoreFactory.eINSTANCE.createMappingEnd();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fromMappingEnd.setCardinality(fromCardinality);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fromMappingEnd.setRoleName(fromRoleName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("COREExternalLanguage fromLanguage = (COREExternalLanguage) perspective.getLanguages().get(fromRoleName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElement fromLanguageElement = getLanguageElement(fromLanguage, fromMetaclass);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fromMappingEnd.setLanguageElement(fromLanguageElement);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// to mapping end settings");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MappingEnd toMappingEnd = CoreFactory.eINSTANCE.createMappingEnd();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toMappingEnd.setCardinality(toCardinality);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toMappingEnd.setRoleName(toRoleName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("COREExternalLanguage toLanguage = (COREExternalLanguage) perspective.getLanguages().get(toRoleName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElement toLanguageElement =");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("getLanguageElement(toLanguage, toMetaclass);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toMappingEnd.setLanguageElement(toLanguageElement);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mappingType.getMappingEnds().add(fromMappingEnd);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mappingType.getMappingEnds().add(toMappingEnd);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("perspective.getMappings().add(mappingType);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ElementMapping elementMapping = new ElementMapping();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elementMapping.setMappingType(mappingType);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elementMapping.setFromLanguageElement(fromLanguageElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elementMapping.setToLanguageElement(toLanguageElement);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return elementMapping;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method creates nested mapping, i.e., a language element mapping which is contained in another language ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* element mapping.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @author Hyacinth Ali");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param mappingType - the container of the nested mapping.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param fromLanguageElement - from mapped language element of the mappingType");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param toLanguageElement - to mapped language element of the mappingType");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param fromNestedElementName - from nested language element name");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param toNestedElementName - to nested language element name");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param fromRoleName - the role name of the from language in the perspective.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param toRoleName - the role name of the to language in the perspective.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static void createNestedMapping(CORELanguageElementMapping mappingType,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("CORELanguageElement fromLanguageElement, CORELanguageElement toLanguageElement, String fromNestedElementName, ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String toNestedElementName, String fromRoleName, String toRoleName) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// from nested language element, which is contained in fromLanguageElement");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElement fromNestedElement = getNestedElement(fromLanguageElement, fromNestedElementName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// to nested language element, which is contained in toLanguageElement");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElement toNestedElement = getNestedElement(toLanguageElement, toNestedElementName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// create the nested mapping");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElementMapping nestedElementMapping = CoreFactory.eINSTANCE.createCORELanguageElementMapping();");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MappingEnd fromNestedElementMappingEnd = CoreFactory.eINSTANCE.createMappingEnd();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fromNestedElementMappingEnd.setRoleName(fromRoleName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fromNestedElementMappingEnd.setLanguageElement(fromNestedElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MappingEnd toNestedElementMappingEnd = CoreFactory.eINSTANCE.createMappingEnd();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toNestedElementMappingEnd.setRoleName(toRoleName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toNestedElementMappingEnd.setLanguageElement(toNestedElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("nestedElementMapping.getMappingEnds().add(fromNestedElementMappingEnd);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fromNestedElementMappingEnd.setType(nestedElementMapping);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("nestedElementMapping.getMappingEnds().add(toNestedElementMappingEnd);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("toNestedElementMappingEnd.setType(nestedElementMapping);");
    _builder.newLine();
    _builder.append("         ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mappingType.getNestedMappings().add(nestedElementMapping);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static InterLanguageMapping createInterLanguageMapping(CORELanguageElementMapping mapping) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("InterLanguageMapping interMapping = CoreFactory.eINSTANCE.createInterLanguageMapping();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mapping.setCoreLanguageElementMapping(mapping);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return interMapping;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static void createInterMappingEnd(InterLanguageMapping interMapping, CORELanguageElementMapping leMapping, ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("boolean origin, boolean destination, int mappingEndNumber) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("InterLanguageMappingEnd interMappingEnd = CoreFactory.eINSTANCE.createInterLanguageMappingEnd();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("interMappingEnd.setOrigin(origin);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("interMappingEnd.setDestination(destination);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("interMappingEnd.setMappingEnd(leMapping.getMappingEnds().get(mappingEndNumber));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns an instance of {@link CORELanguageElement} based on the language container and the");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* referenced language element.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param language, the container of the language element.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param element of the interest.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the language element.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static CORELanguageElement getLanguageElement(COREExternalLanguage language, EObject element) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElement languageElement = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (CORELanguageElement le : language.getLanguageElements()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (le.getLanguageElement().equals(element)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("languageElement = le;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return languageElement;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This helper method returns an instance of a {@link CORELanguageElement} (most structural feature) which are ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* contained in another language element. E.g., the structural feature of the name in a class (i.e., a language ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* element).");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param owner of the language element to be retrieved.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param elementName the given name for the element.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the contained element.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static CORELanguageElement getNestedElement(CORELanguageElement owner, String elementName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("CORELanguageElement nestedElement = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (CORELanguageElement element : owner.getNestedElements()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (element.getName().equals(elementName)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("nestedElement = element;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return nestedElement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static int getNextMappingId(COREPerspective perspective) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int idNumber = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (CORELanguageElementMapping lem : perspective.getMappings()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (lem.getIdentifier() > idNumber) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("idNumber = lem.getIdentifier();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return idNumber + 1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* This method is used to create an instance of {@link IntraLanguageMapping}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param perspective the perspective in which the mapping exists.");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param name the name of the mapping");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param closure whether the mapping will include all parts of a given hierarchy");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param reuse whether the mapping represents a reuse");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param increaseDepth for multi-view models, will crossing this link increase the depth of the navigation bar");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param changeModel will there be a change of model when navigating this link");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param fromElement the originating EClass for the mapping");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("private static IntraLanguageMapping createIntraLanguageMapping(COREPerspective perspective, String name, boolean closure, ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("boolean reuse, boolean increaseDepth, boolean changeModel, EClass fromElement) {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("IntraLanguageMapping ilMapping = CoreFactory.eINSTANCE.createIntraLanguageMapping();");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("ilMapping.setName(name);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("ilMapping.setClosure(true);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("ilMapping.setReuse(true);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("ilMapping.setIncreaseDepth(true);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("ilMapping.setChangeModel(true);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("ilMapping.setFrom(fromElement);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("return ilMapping;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("private static void addHopToILM(IntraLanguageMapping mapping, EReference hop) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mapping.getHops().add(hop);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Gets the cardinality of a given mapping-end.
   */
  public static String getCardinality(final LanguageElementMapping mapping, final boolean isFrom) {
    String cardinality = "";
    if (isFrom) {
      Cardinality _fromCardinality = mapping.getFromCardinality();
      if (_fromCardinality != null) {
        switch (_fromCardinality) {
          case COMPULSORY:
            cardinality = "Cardinality.COMPULSORY";
            break;
          case COMPULSORY_MULTIPLE:
            cardinality = "Cardinality.COMPULSORY_MULTIPLE";
            break;
          case OPTIONAL:
            cardinality = "Cardinality.OPTIONAL";
            break;
          case OPTIONAL_MULTIPLE:
            cardinality = "Cardinality.OPTIONAL_MULTIPLE";
            break;
          default:
            break;
        }
      }
    } else {
      Cardinality _toCardinality = mapping.getToCardinality();
      if (_toCardinality != null) {
        switch (_toCardinality) {
          case COMPULSORY:
            cardinality = "Cardinality.COMPULSORY";
            break;
          case COMPULSORY_MULTIPLE:
            cardinality = "Cardinality.COMPULSORY_MULTIPLE";
            break;
          case OPTIONAL:
            cardinality = "Cardinality.OPTIONAL";
            break;
          case OPTIONAL_MULTIPLE:
            cardinality = "Cardinality.OPTIONAL_MULTIPLE";
            break;
          default:
            break;
        }
      }
    }
    return cardinality;
  }
}
