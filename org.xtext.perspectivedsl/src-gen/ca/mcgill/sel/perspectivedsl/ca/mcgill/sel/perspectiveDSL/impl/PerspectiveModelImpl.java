/**
 * generated by Xtext 2.22.0
 */
package ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.impl;

import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Perspective;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.PerspectiveDSLPackage;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.PerspectiveModel;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Perspective Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.impl.PerspectiveModelImpl#getPerspective <em>Perspective</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PerspectiveModelImpl extends MinimalEObjectImpl.Container implements PerspectiveModel
{
  /**
   * The cached value of the '{@link #getPerspective() <em>Perspective</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPerspective()
   * @generated
   * @ordered
   */
  protected EList<Perspective> perspective;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PerspectiveModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PerspectiveDSLPackage.Literals.PERSPECTIVE_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Perspective> getPerspective()
  {
    if (perspective == null)
    {
      perspective = new EObjectContainmentEList<Perspective>(Perspective.class, this, PerspectiveDSLPackage.PERSPECTIVE_MODEL__PERSPECTIVE);
    }
    return perspective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PerspectiveDSLPackage.PERSPECTIVE_MODEL__PERSPECTIVE:
        return ((InternalEList<?>)getPerspective()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PerspectiveDSLPackage.PERSPECTIVE_MODEL__PERSPECTIVE:
        return getPerspective();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PerspectiveDSLPackage.PERSPECTIVE_MODEL__PERSPECTIVE:
        getPerspective().clear();
        getPerspective().addAll((Collection<? extends Perspective>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PerspectiveDSLPackage.PERSPECTIVE_MODEL__PERSPECTIVE:
        getPerspective().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PerspectiveDSLPackage.PERSPECTIVE_MODEL__PERSPECTIVE:
        return perspective != null && !perspective.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PerspectiveModelImpl
