/*
 * generated by Xtext 2.22.0
 */
package ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.serializer;

import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Hop;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.InterLanguageMappingEnd;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.IntraLanguageMapping;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Language;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.LanguageElementMapping;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.NestedMapping;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Perspective;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.PerspectiveDSLPackage;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.PerspectiveModel;
import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.services.PerspectiveDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PerspectiveDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PerspectiveDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PerspectiveDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PerspectiveDSLPackage.ACTION:
				sequence_Action(context, (ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Action) semanticObject); 
				return; 
			case PerspectiveDSLPackage.HOP:
				sequence_Hop(context, (Hop) semanticObject); 
				return; 
			case PerspectiveDSLPackage.INTER_LANGUAGE_MAPPING_END:
				sequence_InterLanguageMappingEnd(context, (InterLanguageMappingEnd) semanticObject); 
				return; 
			case PerspectiveDSLPackage.INTRA_LANGUAGE_MAPPING:
				sequence_IntraLanguageMapping(context, (IntraLanguageMapping) semanticObject); 
				return; 
			case PerspectiveDSLPackage.LANGUAGE:
				sequence_Language(context, (Language) semanticObject); 
				return; 
			case PerspectiveDSLPackage.LANGUAGE_ELEMENT_MAPPING:
				sequence_LanguageElementMapping(context, (LanguageElementMapping) semanticObject); 
				return; 
			case PerspectiveDSLPackage.NESTED_MAPPING:
				sequence_NestedMapping(context, (NestedMapping) semanticObject); 
				return; 
			case PerspectiveDSLPackage.PERSPECTIVE:
				sequence_Perspective(context, (Perspective) semanticObject); 
				return; 
			case PerspectiveDSLPackage.PERSPECTIVE_MODEL:
				sequence_PerspectiveModel(context, (PerspectiveModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actionType=PerspectiveActionType roleName=ID name=STRING)
	 */
	protected void sequence_Action(ISerializationContext context, ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.ACTION__ACTION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.ACTION__ACTION_TYPE));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.ACTION__ROLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.ACTION__ROLE_NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.ACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getActionTypePerspectiveActionTypeEnumRuleCall_1_0(), semanticObject.getActionType());
		feeder.accept(grammarAccess.getActionAccess().getRoleNameIDTerminalRuleCall_2_0(), semanticObject.getRoleName());
		feeder.accept(grammarAccess.getActionAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Hop returns Hop
	 *
	 * Constraint:
	 *     (hopElement=ID fromGetHop=STRING)
	 */
	protected void sequence_Hop(ISerializationContext context, Hop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.HOP__HOP_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.HOP__HOP_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.HOP__FROM_GET_HOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.HOP__FROM_GET_HOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHopAccess().getHopElementIDTerminalRuleCall_2_0(), semanticObject.getHopElement());
		feeder.accept(grammarAccess.getHopAccess().getFromGetHopSTRINGTerminalRuleCall_4_0(), semanticObject.getFromGetHop());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InterLanguageMappingEnd returns InterLanguageMappingEnd
	 *
	 * Constraint:
	 *     (name=ID origin?=';' destination?=';')
	 */
	protected void sequence_InterLanguageMappingEnd(ISerializationContext context, InterLanguageMappingEnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.INTER_LANGUAGE_MAPPING_END__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.INTER_LANGUAGE_MAPPING_END__NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.INTER_LANGUAGE_MAPPING_END__ORIGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.INTER_LANGUAGE_MAPPING_END__ORIGIN));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.INTER_LANGUAGE_MAPPING_END__DESTINATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.INTER_LANGUAGE_MAPPING_END__DESTINATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInterLanguageMappingEndAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInterLanguageMappingEndAccess().getOriginSemicolonKeyword_8_0(), semanticObject.isOrigin());
		feeder.accept(grammarAccess.getInterLanguageMappingEndAccess().getDestinationSemicolonKeyword_11_0(), semanticObject.isDestination());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntraLanguageMapping returns IntraLanguageMapping
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         closure?=';' 
	 *         reuse?=';' 
	 *         increaseDepth?=';' 
	 *         changeModel?=';' 
	 *         fromElement=ID 
	 *         fromGetElement=STRING 
	 *         hops+=Hop*
	 *     )
	 */
	protected void sequence_IntraLanguageMapping(ISerializationContext context, IntraLanguageMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LanguageElementMapping returns LanguageElementMapping
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         fromCardinality=Cardinality 
	 *         toCardinality=Cardinality 
	 *         fromElement=ID 
	 *         fromRoleName=ID 
	 *         fromGetElement=STRING 
	 *         toElement=ID 
	 *         toRoleName=ID 
	 *         toGetElement=STRING 
	 *         nestedMappings+=NestedMapping* 
	 *         interLanguageMappingEnds+=InterLanguageMappingEnd*
	 *     )
	 */
	protected void sequence_LanguageElementMapping(ISerializationContext context, LanguageElementMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Language returns Language
	 *
	 * Constraint:
	 *     (name=ID rootPackage=STRING packageClassName=ID roleName=ID)
	 */
	protected void sequence_Language(ISerializationContext context, Language semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__ROOT_PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__ROOT_PACKAGE));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__PACKAGE_CLASS_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__PACKAGE_CLASS_NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__ROLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.LANGUAGE__ROLE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLanguageAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLanguageAccess().getRootPackageSTRINGTerminalRuleCall_5_0(), semanticObject.getRootPackage());
		feeder.accept(grammarAccess.getLanguageAccess().getPackageClassNameIDTerminalRuleCall_8_0(), semanticObject.getPackageClassName());
		feeder.accept(grammarAccess.getLanguageAccess().getRoleNameIDTerminalRuleCall_11_0(), semanticObject.getRoleName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NestedMapping returns NestedMapping
	 *
	 * Constraint:
	 *     (name=ID fromElementName=STRING fromRoleName=ID toElementName=STRING toRoleName=ID)
	 */
	protected void sequence_NestedMapping(ISerializationContext context, NestedMapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__FROM_ELEMENT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__FROM_ELEMENT_NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__FROM_ROLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__FROM_ROLE_NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__TO_ELEMENT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__TO_ELEMENT_NAME));
			if (transientValues.isValueTransient(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__TO_ROLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerspectiveDSLPackage.Literals.NESTED_MAPPING__TO_ROLE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNestedMappingAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNestedMappingAccess().getFromElementNameSTRINGTerminalRuleCall_7_0(), semanticObject.getFromElementName());
		feeder.accept(grammarAccess.getNestedMappingAccess().getFromRoleNameIDTerminalRuleCall_9_0(), semanticObject.getFromRoleName());
		feeder.accept(grammarAccess.getNestedMappingAccess().getToElementNameSTRINGTerminalRuleCall_14_0(), semanticObject.getToElementName());
		feeder.accept(grammarAccess.getNestedMappingAccess().getToRoleNameIDTerminalRuleCall_16_0(), semanticObject.getToRoleName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PerspectiveModel returns PerspectiveModel
	 *
	 * Constraint:
	 *     perspective+=Perspective+
	 */
	protected void sequence_PerspectiveModel(ISerializationContext context, PerspectiveModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Perspective returns Perspective
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         default=ID? 
	 *         displayName=STRING 
	 *         languages+=Language* 
	 *         actions+=Action* 
	 *         mappings+=LanguageElementMapping* 
	 *         intralanguagemappings+=IntraLanguageMapping*
	 *     )
	 */
	protected void sequence_Perspective(ISerializationContext context, Perspective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
