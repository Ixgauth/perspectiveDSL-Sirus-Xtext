/**
 * generated by Xtext 2.22.0
 */
package ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.util;

import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.PerspectiveDSLPackage
 * @generated
 */
public class PerspectiveDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PerspectiveDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PerspectiveDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PerspectiveDSLSwitch<Adapter> modelSwitch =
    new PerspectiveDSLSwitch<Adapter>()
    {
      @Override
      public Adapter casePerspectiveModel(PerspectiveModel object)
      {
        return createPerspectiveModelAdapter();
      }
      @Override
      public Adapter casePerspective(Perspective object)
      {
        return createPerspectiveAdapter();
      }
      @Override
      public Adapter caseLanguage(Language object)
      {
        return createLanguageAdapter();
      }
      @Override
      public Adapter caseLanguageElementMapping(LanguageElementMapping object)
      {
        return createLanguageElementMappingAdapter();
      }
      @Override
      public Adapter caseNestedMapping(NestedMapping object)
      {
        return createNestedMappingAdapter();
      }
      @Override
      public Adapter caseInterLanguageMappingEnd(InterLanguageMappingEnd object)
      {
        return createInterLanguageMappingEndAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseIntraLanguageMapping(IntraLanguageMapping object)
      {
        return createIntraLanguageMappingAdapter();
      }
      @Override
      public Adapter caseHop(Hop object)
      {
        return createHopAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.PerspectiveModel <em>Perspective Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.PerspectiveModel
   * @generated
   */
  public Adapter createPerspectiveModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Perspective <em>Perspective</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Perspective
   * @generated
   */
  public Adapter createPerspectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Language <em>Language</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Language
   * @generated
   */
  public Adapter createLanguageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.LanguageElementMapping <em>Language Element Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.LanguageElementMapping
   * @generated
   */
  public Adapter createLanguageElementMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.NestedMapping <em>Nested Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.NestedMapping
   * @generated
   */
  public Adapter createNestedMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.InterLanguageMappingEnd <em>Inter Language Mapping End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.InterLanguageMappingEnd
   * @generated
   */
  public Adapter createInterLanguageMappingEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.IntraLanguageMapping <em>Intra Language Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.IntraLanguageMapping
   * @generated
   */
  public Adapter createIntraLanguageMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Hop <em>Hop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.Hop
   * @generated
   */
  public Adapter createHopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PerspectiveDSLAdapterFactory
