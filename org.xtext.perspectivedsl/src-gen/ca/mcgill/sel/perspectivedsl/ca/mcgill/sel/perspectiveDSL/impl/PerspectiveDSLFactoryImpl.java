/**
 * generated by Xtext 2.22.0
 */
package ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.impl;

import ca.mcgill.sel.perspectivedsl.ca.mcgill.sel.perspectiveDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PerspectiveDSLFactoryImpl extends EFactoryImpl implements PerspectiveDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PerspectiveDSLFactory init()
  {
    try
    {
      PerspectiveDSLFactory thePerspectiveDSLFactory = (PerspectiveDSLFactory)EPackage.Registry.INSTANCE.getEFactory(PerspectiveDSLPackage.eNS_URI);
      if (thePerspectiveDSLFactory != null)
      {
        return thePerspectiveDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PerspectiveDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PerspectiveDSLPackage.PERSPECTIVE_MODEL: return createPerspectiveModel();
      case PerspectiveDSLPackage.PERSPECTIVE: return createPerspective();
      case PerspectiveDSLPackage.LANGUAGE: return createLanguage();
      case PerspectiveDSLPackage.LANGUAGE_ELEMENT_MAPPING: return createLanguageElementMapping();
      case PerspectiveDSLPackage.NESTED_MAPPING: return createNestedMapping();
      case PerspectiveDSLPackage.INTER_LANGUAGE_MAPPING_END: return createInterLanguageMappingEnd();
      case PerspectiveDSLPackage.ACTION: return createAction();
      case PerspectiveDSLPackage.INTRA_LANGUAGE_MAPPING: return createIntraLanguageMapping();
      case PerspectiveDSLPackage.HOP: return createHop();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PerspectiveDSLPackage.CARDINALITY:
        return createCardinalityFromString(eDataType, initialValue);
      case PerspectiveDSLPackage.PERSPECTIVE_ACTION_TYPE:
        return createPerspectiveActionTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PerspectiveDSLPackage.CARDINALITY:
        return convertCardinalityToString(eDataType, instanceValue);
      case PerspectiveDSLPackage.PERSPECTIVE_ACTION_TYPE:
        return convertPerspectiveActionTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PerspectiveModel createPerspectiveModel()
  {
    PerspectiveModelImpl perspectiveModel = new PerspectiveModelImpl();
    return perspectiveModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Perspective createPerspective()
  {
    PerspectiveImpl perspective = new PerspectiveImpl();
    return perspective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Language createLanguage()
  {
    LanguageImpl language = new LanguageImpl();
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LanguageElementMapping createLanguageElementMapping()
  {
    LanguageElementMappingImpl languageElementMapping = new LanguageElementMappingImpl();
    return languageElementMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NestedMapping createNestedMapping()
  {
    NestedMappingImpl nestedMapping = new NestedMappingImpl();
    return nestedMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterLanguageMappingEnd createInterLanguageMappingEnd()
  {
    InterLanguageMappingEndImpl interLanguageMappingEnd = new InterLanguageMappingEndImpl();
    return interLanguageMappingEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntraLanguageMapping createIntraLanguageMapping()
  {
    IntraLanguageMappingImpl intraLanguageMapping = new IntraLanguageMappingImpl();
    return intraLanguageMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Hop createHop()
  {
    HopImpl hop = new HopImpl();
    return hop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cardinality createCardinalityFromString(EDataType eDataType, String initialValue)
  {
    Cardinality result = Cardinality.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCardinalityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveActionType createPerspectiveActionTypeFromString(EDataType eDataType, String initialValue)
  {
    PerspectiveActionType result = PerspectiveActionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPerspectiveActionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PerspectiveDSLPackage getPerspectiveDSLPackage()
  {
    return (PerspectiveDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PerspectiveDSLPackage getPackage()
  {
    return PerspectiveDSLPackage.eINSTANCE;
  }

} //PerspectiveDSLFactoryImpl
